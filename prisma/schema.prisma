// Prisma schema file for UNM-Server V2
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  avatar    String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  playlists    Playlist[]
  favorites    Favorite[]
  searchLogs   SearchLog[]
  apiUsage     ApiUsage[]
  userSessions UserSession[]

  @@map("users")
}

// 用户角色枚举
enum UserRole {
  USER
  ADMIN
  MODERATOR
}

// 歌曲表
model Song {
  id          String     @id @default(cuid())
  title       String
  artist      String
  album       String?
  duration    Int? // 秒
  coverUrl    String?
  lyricUrl    String?
  source      MusicSource
  sourceId    String // 原始平台的ID
  quality     String? // 音质信息
  fileSize    BigInt? // 文件大小（字节）
  format      String? // 文件格式
  bitrate     Int? // 比特率
  isAvailable Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // 关联关系
  playlistSongs PlaylistSong[]
  favorites     Favorite[]
  searchLogs    SearchLog[]
  songUrls      SongUrl[]

  @@unique([source, sourceId])
  @@map("songs")
}

// 音乐来源枚举
enum MusicSource {
  NETEASE
  TENCENT
  KUGOU
  KUWO
  BILIBILI
  MIGU
  GDSTUDIO
}

// 歌曲URL表（支持多个URL）
model SongUrl {
  id        String   @id @default(cuid())
  songId    String
  url       String
  quality   String // 音质标识
  bitrate   Int? // 比特率
  format    String // 文件格式
  fileSize  BigInt? // 文件大小
  expiresAt DateTime? // URL过期时间
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@map("song_urls")
}

// 播放列表表
model Playlist {
  id          String   @id @default(cuid())
  name        String
  description String?
  coverUrl    String?
  isPublic    Boolean  @default(false)
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 关联关系
  user          User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  playlistSongs PlaylistSong[]

  @@map("playlists")
}

// 播放列表歌曲关联表
model PlaylistSong {
  id         String   @id @default(cuid())
  playlistId String
  songId     String
  position   Int // 在播放列表中的位置
  addedAt    DateTime @default(now())

  // 关联关系
  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([playlistId, songId])
  @@map("playlist_songs")
}

// 收藏表
model Favorite {
  id        String   @id @default(cuid())
  userId    String
  songId    String
  createdAt DateTime @default(now())

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  song Song @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@unique([userId, songId])
  @@map("favorites")
}

// 搜索日志表
model SearchLog {
  id        String      @id @default(cuid())
  userId    String?
  keyword   String
  source    MusicSource?
  resultId  String? // 如果用户点击了某个结果
  ip        String?
  userAgent String?
  createdAt DateTime    @default(now())

  // 关联关系
  user   User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  result Song? @relation(fields: [resultId], references: [id], onDelete: SetNull)

  @@map("search_logs")
}

// API使用统计表
model ApiUsage {
  id         String   @id @default(cuid())
  userId     String?
  endpoint   String
  method     String
  statusCode Int
  responseTime Int // 毫秒
  ip         String?
  userAgent  String?
  createdAt  DateTime @default(now())

  // 关联关系
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("api_usage")
}

// 用户会话表
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  ip        String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // 关联关系
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

// 系统配置表
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      ConfigType @default(STRING)
  description String?
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}

// 配置类型枚举
enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

// 缓存表（用于持久化重要缓存）
model CacheEntry {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String // JSON字符串
  expiresAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("cache_entries")
}

// 错误日志表
model ErrorLog {
  id         String   @id @default(cuid())
  level      LogLevel
  message    String
  stack      String?
  context    String? // JSON字符串
  userId     String?
  ip         String?
  userAgent  String?
  endpoint   String?
  method     String?
  createdAt  DateTime @default(now())

  @@map("error_logs")
}

// 日志级别枚举
enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}
