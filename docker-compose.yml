version: '3.8'

services:
  # UNM-Server API 服务
  unm-api:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: unm-server-v2
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - NODE_ENV=production
      - PORT=5678
      # 服务开关配置
      - REDIS_ENABLED=${REDIS_ENABLED:-true}
      - DATABASE_ENABLED=${DATABASE_ENABLED:-true}
      - LOGGING_ENABLED=${LOGGING_ENABLED:-true}
      - RATE_LIMITING_ENABLED=${RATE_LIMITING_ENABLED:-true}
      - HEALTH_CHECK_ENABLED=${HEALTH_CHECK_ENABLED:-true}
      - SECURITY_MIDDLEWARE_ENABLED=${SECURITY_MIDDLEWARE_ENABLED:-true}
      - CORS_ENABLED=${CORS_ENABLED:-true}
      - CACHE_ENABLED=${CACHE_ENABLED:-true}
      - METRICS_ENABLED=${METRICS_ENABLED:-false}
      - API_DOCS_ENABLED=${API_DOCS_ENABLED:-true}
      - GDSTUDIO_ENABLED=${GDSTUDIO_ENABLED:-true}
      # 服务配置
      - DATABASE_URL=${DATABASE_URL:-postgresql://unm:password@postgres:5432/unm_server}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - CACHE_DEFAULT_TTL_SECONDS=${CACHE_DEFAULT_TTL_SECONDS:-3600}
      - ALLOWED_DOMAIN=${ALLOWED_DOMAIN:-*}
      # 速率限制配置
      - GLOBAL_RATE_LIMIT_PER_MINUTE=${GLOBAL_RATE_LIMIT_PER_MINUTE:-60}
      - API_RATE_LIMIT_PER_MINUTE=${API_RATE_LIMIT_PER_MINUTE:-30}
      - SEARCH_RATE_LIMIT_PER_MINUTE=${SEARCH_RATE_LIMIT_PER_MINUTE:-20}
      # 外部API配置
      - GDSTUDIO_API_URL=${GDSTUDIO_API_URL:-https://music-api.gdstudio.xyz/api.php}
      - GDSTUDIO_REQUEST_TIMEOUT=${GDSTUDIO_REQUEST_TIMEOUT:-10000}
    depends_on:
      postgres:
        condition: service_healthy
        required: ${DATABASE_ENABLED:-true}
      redis:
        condition: service_healthy
        required: ${REDIS_ENABLED:-true}
    networks:
      - unm-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:5678/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # PostgreSQL 数据库 (条件启动)
  postgres:
    image: postgres:15-alpine
    container_name: unm-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-unm_server}
      - POSTGRES_USER=${POSTGRES_USER:-unm}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/database/prisma/migrations:/docker-entrypoint-initdb.d
    networks:
      - unm-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-unm} -d ${POSTGRES_DB:-unm_server}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - database-enabled
      - full-stack

  # Redis 缓存 (条件启动)
  redis:
    image: redis:7-alpine
    container_name: unm-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-}
    volumes:
      - redis_data:/data
    networks:
      - unm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles:
      - redis-enabled
      - full-stack

  # Nginx 反向代理 (可选)
  nginx:
    image: nginx:alpine
    container_name: unm-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - unm-api
    networks:
      - unm-network
    profiles:
      - with-nginx

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  unm-network:
    driver: bridge
